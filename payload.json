{
  "branch": "simulation",
  "modules": {
    "main": "const utils={getEnergySources:function(e){return e.find(FIND_SOURCES)},getBestSource:function(e){const n=e.room.find(FIND_SOURCES);return n.reduce((n,t)=>{const r=_.filter(Game.creeps,n=>n.memory.sourceId===t.id&&n.memory.role===e.memory.role).length;return!n||r<n.workingHere?{source:t,workingHere:r}:n},null)?.source||n[0]}},roleHarvester={getBody:function(e){return e>=550?[WORK,WORK,WORK,CARRY,CARRY,MOVE,MOVE]:e>=400?[WORK,WORK,CARRY,CARRY,MOVE,MOVE]:[WORK,CARRY,MOVE]},run:function(e){if(e.memory.sourceId||(e=>{const n=utils.getBestSource(e);e.memory.sourceId=n.id})(e),e.store.getFreeCapacity()>0){const n=Game.getObjectById(e.memory.sourceId);e.harvest(n)==ERR_NOT_IN_RANGE&&e.moveTo(n,{visualizePathStyle:{stroke:'#ffaa00'}})}else{const n=e.room.find(FIND_STRUCTURES,{filter:e=>e.structureType==STRUCTURE_EXTENSION||e.structureType==STRUCTURE_SPAWN||e.structureType==STRUCTURE_TOWER&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});if(n.length>0){const t=e.pos.findClosestByPath(n);e.transfer(t,RESOURCE_ENERGY)==ERR_NOT_IN_RANGE&&e.moveTo(t,{visualizePathStyle:{stroke:'#ffffff'}})}}}},roleUpgrader={getBody:function(e){return e>=500?[WORK,WORK,CARRY,CARRY,MOVE,MOVE]:[WORK,CARRY,MOVE]},run:function(e){e.memory.upgrading&&0==e.store[RESOURCE_ENERGY]&&(e.memory.upgrading=!1,e.say('🔄 harvest')),!e.memory.upgrading&&0==e.store.getFreeCapacity()&&(e.memory.upgrading=!0,e.say('⚡ upgrade')),e.memory.upgrading?e.upgradeController(e.room.controller)==ERR_NOT_IN_RANGE&&e.moveTo(e.room.controller,{visualizePathStyle:{stroke:'#ffffff'}}):(n=utils.getBestSource(e),e.harvest(n)==ERR_NOT_IN_RANGE&&e.moveTo(n,{visualizePathStyle:{stroke:'#ffaa00'}}))}},roleBuilder={getBody:function(e){return e>=500?[WORK,WORK,CARRY,CARRY,MOVE,MOVE]:[WORK,CARRY,MOVE]},run:function(e){if(e.memory.building&&0==e.store[RESOURCE_ENERGY]&&(e.memory.building=!1,e.say('🔄 harvest')),!e.memory.building&&0==e.store.getFreeCapacity()&&(e.memory.building=!0,e.say('🚧 build')),e.memory.building){const n=e.room.find(FIND_STRUCTURES,{filter:e=>e.hits<e.hitsMax});if(n.length){const t=e.pos.findClosestByPath(n);return void(e.repair(t)==ERR_NOT_IN_RANGE&&e.moveTo(t,{visualizePathStyle:{stroke:'#ffffff'}}))}const t=e.room.find(FIND_CONSTRUCTION_SITES);if(t.length){const n=e.pos.findClosestByPath(t);e.build(n)==ERR_NOT_IN_RANGE&&e.moveTo(n,{visualizePathStyle:{stroke:'#ffffff'}})}}else{const n=utils.getBestSource(e);e.harvest(n)==ERR_NOT_IN_RANGE&&e.moveTo(n,{visualizePathStyle:{stroke:'#ffaa00'}})}}},colonyManager={roles:{harvester:roleHarvester,upgrader:roleUpgrader,builder:roleBuilder},getDesiredCounts:function(e){const n=e.find(FIND_SOURCES).length,t=e.find(FIND_CONSTRUCTION_SITES).length;return{harvester:Math.min(2*n,4),upgrader:2,builder:t>0?2:1}},spawnCreep:function(e,n){const t=e.room.energyAvailable,r=this.roles[n].getBody(t),o=n.charAt(0).toUpperCase()+n.slice(1)+Game.time;return e.spawnCreep(r,o,{memory:{role:n}})}};module.exports.loop=function(){for(const e in Memory.creeps)Game.creeps[e]||(delete Memory.creeps[e],console.log('Clearing non-existing creep memory:',e));for(const e in Game.spawns){const n=Game.spawns[e],t=n.room,r={};for(const e in colonyManager.roles)r[e]=_.filter(Game.creeps,n=>n.memory.role==e&&n.room.name==t.name).length;const o=colonyManager.getDesiredCounts(t);for(const e in o)if(r[e]<o[e]&&!n.spawning){colonyManager.spawnCreep(n,e);break}if(n.spawning){const e=Game.creeps[n.spawning.name];n.room.visual.text('🛠️'+e.memory.role,n.pos.x+1,n.pos.y,{align:'left',opacity:.8})}}for(const e in Game.creeps){const n=Game.creeps[e];colonyManager.roles[n.memory.role]&&colonyManager.roles[n.memory.role].run(n)}if(Game.time%10==0)for(const e in Game.spawns){const n=Game.spawns[e].room,t={};for(const e in colonyManager.roles)t[e]=_.filter(Game.creeps,t=>t.memory.role==e&&t.room.name==n.name).length;console.log(`==== Status Report: ${n.name} ====`);for(const e in t)console.log(`${e}: ${t[e]}`);console.log(`Energy: ${n.energyAvailable}/${n.energyCapacityAvailable}`),console.log('====================')}};"
  }
}
